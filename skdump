#!/usr/bin/env python
#-*- coding: utf-8 -*-


import sys
import os
import re
import sqlite3
import datetime
import argparse


class SkypeDbDumper(object):
    _messageSelect = ("SELECT id, chatname, author, "
                             "from_dispname, timestamp, "
                             "body_xml, dialog_partner "
                      "FROM Messages ORDER BY timestamp ASC")
    
    
    def __init__(self, dbFile, dumpDirectory, encoding='utf-8'):
        self._dbFile = dbFile
        self._dumpDirectory = dumpDirectory
        self._encoding = encoding
        
        self._connection = sqlite3.connect(dbFile)
        self._cursor = self._connection.cursor()
        
        self._openFilesPool = {}
    
    def _messageIter(self):
        selectQuery = self._messageSelect
        self._cursor.execute(selectQuery)
        for row in self._cursor:
            yield {'id': row[0],
                   'chatname': row[1],
                   'skype_name': row[2],
                   'name': row[3],
                   'timestamp': unicode(datetime.datetime.\
                                fromtimestamp(int(row[4])).\
                                strftime('[%Y-%m-%d %H:%M:%S]')),
                   'message': row[5] if row[5] else u'',
                   'dialog_partner': row[6]}
    
    def _assembleMessage(self, row):
        message = row['timestamp'] + u" " + row['name'] + \
                  u" (" + row['skype_name'] + u"):  " + row['message'] + u"\n"
        
        return message.encode(self._encoding)
    
    def _prepareChatName(self, chatName):
        return chatName.split(';')[0].replace('/$','__')
    
    def _getFiledesc(self, chat):
        if(not self._openFilesPool.has_key(chat)):
            chatFlName = chat + '.txt'
            flPath = os.path.join(self._dumpDirectory, chatFlName)
            self._openFilesPool[chat] = open(flPath, 'w')
        
        return self._openFilesPool[chat]
    
    def _write(self, chatName, message, dialogPartner, skypeName):
        try:
            chat = self._prepareChatName(chatName)
        except Exception, err:
            try:
                chat = skypeName + "__" + dialogPartner
            except Exception, err:
                chat = "unknown_chat"
        self._getFiledesc(chat).write(message)
    
    def dump(self):
        for row in self._messageIter():
            self._write(row['chatname'], self._assembleMessage(row), row['dialog_partner'], row['skype_name'])


def mainArgs():
    parser = argparse.ArgumentParser(description=("Takes skype history sqlite db "
                                                  "and dumps it into chat files"))
    parser.add_argument("skype_db",
                        help="Path to skype's messages sqlite db")
    parser.add_argument('-d', '--dump-directory',
                        help=("Directory where skype log files are saved. "
                              "Default is current directory"))
    
    arguments = parser.parse_args()
    
    if(not os.path.exists(arguments.skype_db)):
        print >> sys.stderr, "Error: Db file does not exists: %s" % skype_db
        sys.exit(1)
    if(arguments.dump_directory and
       not os.path.isdir(arguments.dump_directory)):
        print >> sys.stderr, ("Error: Destination directory "
                              "is not a directory: %s" % arguments.dump_directory)
        sys.exit(1)
    
    return arguments

def main():
    args = mainArgs()
    dbFilename = os.path.abspath(args.skype_db)
    dumpDirectory = os.path.abspath(args.dump_directory
                                    if args.dump_directory else os.curdir)
    dbParser = SkypeDbDumper(dbFilename, dumpDirectory)
    dbParser.dump()


if(__name__ == '__main__'):
    main()